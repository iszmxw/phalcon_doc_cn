Phalcon 开发工具Phalcon Developer Tools
===========================================
halcon提供的这个开发工具主要是用来辅助开发，比如生成一些程序的基本框架，生成控制器模型等。使用这个工具我们只需要一个简单的命令即可生成应用的基本框架。

These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with
a simple command, allowing you to easily develop applications using Phalcon.

.. highlights::
    **Important:** Phalcon Framework version 0.5.0 or greater is needed to use developer tools. It is highly recommended
    to use PHP 5.4 or greater. If you prefer to use the web version instead of the console, this `blog post`_ offers more information.

下载Download
---------------
我们可以从 Github_ 上下载或克隆下来这个跨平台的开发辅助工具。

You can download or clone a cross platform package containing the developer tools from Github_.

安装Installation
^^^^^^^^^^^^^^^^^^^^^^
下面详尽的说明了如何在不同的操作系统平台上安装这个辅助开发工具：

These are detailed instructions on how to install the developer tools on different platforms:

.. toctree::
   :maxdepth: 1

   wintools
   mactools
   linuxtools

获取可用的命令Getting Available Commands
-----------------------------------------------
我们可以在虚拟控制台上输入如下命令：phalcon commands

You can get a list of available commands in Phalcon tools by typing: phalcon commands

.. code-block:: sh

   $ phalcon commands

   Phalcon DevTools (1.2.3)

   Available commands:
     commands (alias of: list, enumerate)
     controller (alias of: create-controller)
     model (alias of: create-model)
     all-models (alias of: create-all-models)
     project (alias of: create-project)
     scaffold
     migration
     webtools


生成项目框架Generating a Project Skeleton
----------------------------------------------
我们可以使用Phalcon开发辅助工具生成预先定义的项目架构。 默认情况下，phalcon开发辅助工具会使用apache的mod_rewrite来生成程序的骨架. 要创建项目我们只需要在我们的 web服务器根目录下输入如下命令：

You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the
project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:

.. code-block:: sh

      $ pwd

      /Applications/MAMP/htdocs

      $ phalcon create-project store

执行命令后会生成如下的文档结构的项目：	  
	  
The above recommended project structure was generated:

.. figure:: ../_static/img/tools-2.png
   :align: center

我们可以在命令上加 –help 以显示帮助信息（下面的帮助中的中文是翻译时加上去的）：   
   
You could add the parameter *--help* to get help on the usage of a certain script:

.. code-block:: sh

Phalcon DevTools (1.2.3)

Help:
  Creates a project

Usage:
  project [name] [type] [directory] [enable-webtools]

Arguments:
  help	Shows this help text

Example
  phalcon project store simple

Options:
 --name               Name of the new project
 --enable-webtools    Determines if webtools should be enabled [optional]
 --directory=s        Base path on which project will be created [optional]
 --type=s             Type of the application to be generated (micro, simple, modules)
 --template-path      Specify a template path [optional]
 --use-config-ini     Use a ini file as configuration file [optional]
 --trace              Shows the trace of the framework in case of exception. [optional]
 --help               Shows this help

我们访问新生成项目的地址显示如下： 
 
Accessing the project from the web server will show you:

.. figure:: ../_static/img/tools-6.png
   :align: center

生成控制器Generating Controllers
-------------------------------------
我们可以使用phalcon create-controller –name test或phalcon controller –name test来生成名为test的控制器. 当然要使用此命令当前的执行命令目录必须为已存在的phalcon项目内.

The command "create-controller" generates controller skeleton structures. It's important to invoke this command inside a directory
that already has a Phalcon project.

.. code-block:: sh

         $ phalcon create-controller --name test

上面的命令会生成如下代码：		 
		 
The following code is generated by the script:

.. code-block:: php

    <?php

    class TestController extends Phalcon\Mvc\Controller
    {

        public function indexAction()
        {

        }

    }

数据库配置Preparing Database Settings
-------------------------------------------
当我们使用phalcon的辅助开发工具生成项目时，则生成的配置信息会被放在 *app/config/config.ini* 文件内。 我们必须要正确的配置连接信息才可生成模型或基本的CRUD操作。 可以在config.ini中进行修改配置信息：

When a project is generated using developer tools. A configuration file can be found in *app/config/config.ini* To generate models
or scaffold, you will need to change the settings used to connect to your database.

Change the database section in your config.ini file:

.. code-block:: ini

    [database]
    adapter  = Mysql
    host     = "127.0.0.1"
    username = "root"
    password = "secret"
    dbname   = "store_db"

    [phalcon]
    controllersDir = "../app/controllers/"
    modelsDir      = "../app/models/"
    viewsDir       = "../app/views/"
    baseUri        = "/store/"

生成模型Generating Models
-----------------------------
使用phalcon开发辅助工具我们可以有若干种方式来生成模型。 我人可以有选择的生成若干个模型或是全部生成。 亦可以指定生成公有属性或是生成setter和getter方法。

There are several ways to create models. You can create all models from the default database connection or some selectively. Models
can have public attributes for the field representations or setters/getters can be used.

Options:
 --name=s             Table name
 --schema=s           Name of the schema. [optional]
 --namespace=s        Model's namespace [optional]
 --get-set            Attributes will be protected and have setters/getters. [optional]
 --extends=s          Model extends the class name supplied [optional]
 --doc                Helps to improve code completion on IDEs [optional]
 --directory=s        Base path on which project will be created [optional]
 --force              Rewrite the model. [optional]
 --trace              Shows the trace of the framework in case of exception. [optional]
 --mapcolumn          Get some code for map columns. [optional]

最简单的生成模型的方式： 
 
The simplest way to generate a model is:

.. code-block:: sh

         $ phalcon model products

.. code-block:: sh

         $ phalcon model --name tablename

所有的字段设置为公有：		 
		 
All table fields are declared public for direct access.

.. code-block:: php

    <?php

    class Products extends \Phalcon\Mvc\Model
    {

        /**
         * @var integer
         */
        public $id;

        /**
         * @var integer
         */
        public $types_id;

        /**
         * @var string
         */
        public $name;

        /**
         * @var string
         */
        public $price;

        /**
         * @var integer
         */
        public $quantity;

        /**
         * @var string
         */
        public $status;

    }

我们可以在生成模型时指定 *--get-set* 参数以实现对字面的保护， 这样我们可以在setter/getter方法里执行一些业务逻辑。	
	
By adding the *--get-set* you can generate the fields with protected variables and public setter/getter methods. Those methods
can help in business logic implementation within the setter/getter methods.

.. code-block:: php

    <?php

    class Products extends \Phalcon\Mvc\Model
    {

        /**
         * @var integer
         */
        protected $id;

        /**
         * @var integer
         */
        protected $types_id;

        /**
         * @var string
         */
        protected $name;

        /**
         * @var string
         */
        protected $price;

        /**
         * @var integer
         */
        protected $quantity;

        /**
         * @var string
         */
        protected $status;


        /**
         * Method to set the value of field id
         * @param integer $id
         */
        public function setId($id)
        {
            $this->id = $id;
        }

        /**
         * Method to set the value of field types_id
         * @param integer $types_id
         */
        public function setTypesId($types_id)
        {
            $this->types_id = $types_id;
        }

        ...

        /**
         * Returns the value of field status
         * @return string
         */
        public function getStatus()
        {
            return $this->status;
        }

    }

另一个非常好的特性即是在我们多次生成模型时，原有的对模型的更改依然会存在。 这样我们就可以不用担心对模型的属性进行修会被后来再次执模型的生成命令所覆盖。下面的截图显示了这是如何工作的：	
	
A nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the
addition or removal of fields and properties, without worrying about losing changes made to the model itself.
The following screencast shows you how it works:

.. raw:: html

   <div align="center"><iframe src="http://player.vimeo.com/video/39213020" width="500" height="266" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>

生成基本的 CRUDS caffold a CRUD
-----------------------------------
使用phalcon开发辅助工具我们可以直接快速的生成一个模型的CRUD操作。 如果我们想快速的生成模型的CRUD操作只需要使用phalcon辅助开发工具的中scaffold命令即可。

Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and
controllers for a new resource in a single operation, scaffolding is the tool for the job.

代码生成后，你可以根据自己的需要修改生成的代码。很多开发者可能不会去使用这个功能，其实这东西有时不是太好用，很多时候开发者往往会手动的书写相关代码。使用scaffold产生的代码可以 帮助我们理解框架是如何工作的当然也可以帮助我们制作出快速原型来。 下面的截图展示了基于products表的scaffold:

Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting
to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the
framework works or develop prototypes. The screenshot below shows a scaffold based on the table "products":

.. code-block:: sh

         $ phalcon scaffold --table-name test

scaffold生成器会在相关的文件夹中生成若干个文档。 下面是所生成文件的概览：		 
		 
The scaffold generator will build several files in your application, along with some folders. Here's a quick overview of what will be generated:

+----------------------------------------+--------------------------------+
| File                                   | Purpose                        |
+========================================+================================+
| app/controllers/ProductsController.php | The Products controller        |
+----------------------------------------+--------------------------------+
| app/models/Products.php                | The Products model             |
+----------------------------------------+--------------------------------+
| app/views/layout/products.phtml        | Controller layout for Products |
+----------------------------------------+--------------------------------+
| app/views/products/new.phtml           | View for the action "new"      |
+----------------------------------------+--------------------------------+
| app/views/products/edit.phtml          | View for the action "edit"     |
+----------------------------------------+--------------------------------+
| app/views/products/search.phtml        | View for the action "search"   |
+----------------------------------------+--------------------------------+

在生成的Products控制器中，我们可以看到一个搜索表单和一个生成新product的链接：

When browsing the recently generated controller, you will see a search form and a link to create a new Product:

.. figure:: ../_static/img/tools-10.png
   :align: center

在创建页面我们可以生成经过验证的Products记录。 Phalcon会自动的验证数据库中的非空字段。   
   
The "create page" allows you to create products applying validations on the Products model. Phalcon will automatically validate
not null fields producing warnings if any of them is required.

.. figure:: ../_static/img/tools-11.png
   :align: center

执行搜索后，分页组件会显示颁后的结果。 我们在结果列表的前面放置Edit或Delete链接，以实现相应的操作。   
   
After performing a search, a pager component is available to show paged results. Use the "Edit" or "Delete" links in front of each result to perform such actions.

.. figure:: ../_static/img/tools-12.png
   :align: center

工具的 Web 界面Web Interface to Tools
-----------------------------------------
另外，如果你喜欢我们还可以在生成项目时通过添加参数以实现在项目中使用Phalcon开发工具的web接口。 下面的视频中展示了如何工作的：

Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:

.. raw:: html

   <div align="center"><iframe src="http://player.vimeo.com/video/42367665" width="500" height="266" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>

集成工具到 PhpStorm Integrating Tools with PhpStorm IDE
-----------------------------------------------------------
下面的视频中展示了如何在 `PhpStorm IDE`_ 中集成辅助开发工具。 这个配置步骤也适用于其它的PHP IDE.

The screencast below shows how to integrate developer tools with the `PhpStorm IDE`_. The configuration steps could be easily adapted to other IDEs for PHP.

.. raw:: html

   <div align="center"><iframe src="http://player.vimeo.com/video/43455647" width="500" height="266" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>

结束语Conclusion
---------------------
Phalcon开发辅助工具为我们提供了一种简易的产生应用代码的方法， 这可以减少开发时间及潜在的错误。

Phalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors.

.. _blog post: http://blog.phalconphp.com/post/23251010409/dont-like-command-line-and-consoles-no-problem
.. _Github: https://github.com/phalcon/phalcon-devtools
.. _Bootstrap: http://twitter.github.com/bootstrap/
.. _PhpStorm IDE: http://www.jetbrains.com/phpstorm/
