视图助手View Helpers
======================
编写和维护HTML标记很快就会变成一个乏味的任务,因为命名约定和众多的属性需要被考虑。Phalcon提供:doc:`Phalcon\\Tag <../api/Phalcon_Tag>`来处理这些复杂的工作,使用视图助手来生成HTML标记。

Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to
be taken into consideration. Phalcon deals with this complexity by offering :doc:`Phalcon\\Tag <../api/Phalcon_Tag>`, which in turn offers
view helpers to generate HTML markup.

该组件可被用在一个纯HTML + PHP视图或:doc:`Volt <volt>`模板。

This component can be used in a plain HTML+PHP view or in a :doc:`Volt <volt>` template.

.. highlights::

    本指南并不打算成为一个完整的文档,更多的使用说明请参考:doc:`Phalcon\\Tag <../api/Phalcon_Tag>`页面的完整的api说明。

    This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit
    the :doc:`Phalcon\\Tag <../api/Phalcon_Tag>` page in the API for a complete reference.

文档内容的类型Document Type of Content
-----------------------------------------------
Phalcon提供Phalcon\\Tag::setDoctype() 辅助设置文档内容的类型。文档类型设置可能会影响到其他标签产生的HTML输出。例如,如果设置XHTML文档类型,返回或输出HTML标签会产生遵循标准的XHTML闭合标记。

Phalcon provides Phalcon\\Tag::setDoctype() helper to set document type of the content. Document type setting may affect HTML output produced by other tag helpers.
For example, if you set XHTML document type family, helpers that return or output HTML tags will produce self-closing tags to follow valid XHTML standard.

Phalcon\\Tag命名空间可用的文档类型：

Available document type constants in Phalcon\\Tag namespace are:

+----------------------+------------------------+
| Constant             | Document type          |
+======================+========================+
| HTML32               | HTML 3.2               |
+----------------------+------------------------+
| HTML401_STRICT       | HTML 4.01 Strict       |
+----------------------+------------------------+
| HTML401_TRANSITIONAL | HTML 4.01 Transitional |
+----------------------+------------------------+
| HTML401_FRAMESET     | HTML 4.01 Frameset     |
+----------------------+------------------------+
| HTML5                | HTML 5                 |
+----------------------+------------------------+
| XHTML10_STRICT       | XHTML 1.0 Strict       |
+----------------------+------------------------+
| XHTML10_TRANSITIONAL | XHTML 1.0 Transitional |
+----------------------+------------------------+
| XHTML10_FRAMESET     | XHTML 1.0 Frameset     |
+----------------------+------------------------+
| XHTML11              | XHTML 1.1              |
+----------------------+------------------------+
| XHTML20              | XHTML 2.0              |
+----------------------+------------------------+
| XHTML5               | XHTML 5                |
+----------------------+------------------------+

设置文档类型

Setting document type.

.. code-block:: php

    <?php

    use Phalcon\Tag;

    $this->tag->setDoctype(Tag::HTML401_STRICT);
    ?>

获得文档类型	
	
Getting document type.

.. code-block:: html+php

    <?= $this->tag->getDoctype() ?>
    <html>
    <!-- your HTML code -->
    </html>

会产生如下HTML代码	
	
The following HTML will be produced.

.. code-block:: html

    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
    <html>
    <!-- your HTML code -->
    </html>

Volt语法：	
	
Volt syntax:

.. code-block:: html+jinja

    {{ get_doctype() }}
    <html>
    <!-- your HTML code -->
    </html>

生成链接Generating Links
-------------------------------
一个真正的任何web应用程序或网站的共同任务是产生链接,让我们从一个页面导航到另一个地方。我们可以用以下方法创建内部url:

A real common task in any web application or website is to produce links that allow us to navigate from one page to another.
When they are internal URLs we can create them in the following manner:

.. code-block:: html+php

    <!-- for the default route -->
    <?= $this->tag->linkTo("products/search", "Search") ?>

    <!-- with CSS attributes -->
    <?= $this->tag->linkTo(array('products/edit/10', 'Edit', 'class' => 'edit-btn')) ?>

    <!-- for a named route -->
    <?= $this->tag->linkTo(array(array('for' => 'show-product', 'title' => 123, 'name' => 'carrots'), 'Show')) ?>

所有链接通过 :doc:`Phalcon\\Mvc\\Url <url>`组件来产生	
	
Actually, all produced URLs are generated by the component :doc:`Phalcon\\Mvc\\Url <url>` (or service "url" failing)

一些链接通过Volt来生成：

Same links generated with Volt:

.. code-block:: html+jinja

    <!-- for the default route -->
    {{ link_to("products/search", "Search") }}

    <!-- for a named route -->
    {{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show') }}

    <!-- for a named route with class -->
    {{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show','class'=>'edit-btn') }}

创建表单Creating Forms
-------------------------
表单在web应用程序中获取用户输入，是一个非常重要组成部分。下面的例子展示了如何通过使用视图助手实现一个简单的搜索表单:

Forms in web applications play an essential part in retrieving user input. The following example shows how to implement a simple search form using view helpers:

.. code-block:: html+php

    <!-- Sending the form by method POST -->
    <?= $this->tag->form("products/search") ?>
        <label for="q">Search:</label>
        <?= $this->tag->textField("q") ?>
        <?= $this->tag->submitButton("Search") ?>
    <?= $this->tag->endForm() ?>

    <!-- Specifying another method or attributes for the FORM tag -->
    <?= $this->tag->form(array("products/search", "method" => "get")); ?>
        <label for="q">Search:</label>
        <?= $this->tag->textField("q"); ?>
        <?= $this->tag->submitButton("Search"); ?>
    <?= $this->tag->endForm() ?>

这最后的代码将生成以下HTML:	
	
This last code will generate the following HTML:

.. code-block:: html

    <form action="/store/products/search/" method="get">
         <label for="q">Search:</label>
         <input type="text" id="q" value="" name="q" />
         <input type="submit" value="Search" />
    </form>

在Volt中生成同样的表单：	
	
Same form generated in Volt:

.. code-block:: html+jinja

    <!-- Specifying another method or attributes for the FORM tag -->
    {{ form("products/search", "method": "get") }}
        <label for="q">Search:</label>
        {{ text_field("q") }}
        {{ submit_button("Search") }}
    {{ endform() }}

Phalcon为面向对象创建表单提供:doc:`form builder <forms>`组件。
	
Phalcon also provides a :doc:`form builder <forms>` to create forms in an object-oriented manner.

生成表单元素的视图助手Helpers to Generate Form Elements
---------------------------------------------------------------
Phalcon提供了一系列的用于生成表单元素的助手，例如：文本框，按钮等。视图助手的第一个参数是生成元素的名称。提交表单时,将通过表单传递同名数据。在一个控制器可以在请求对象上（$this->request）通过使用getPost()和getQuery()方法得到相同的名称的数值。

Phalcon provides a series of helpers to generate form elements such as text fields, buttons and more. The first parameter of each helper is always the name of the element to be generated. When the form is submitted, the name will be passed along with the form data. In a controller you can get these values using the same name by using the getPost() and getQuery() methods on the request object ($this->request).

.. code-block::  html+php

    <?php echo $this->tag->textField("username") ?>

    <?php echo $this->tag->textArea(array(
        "comment",
        "This is the content of the text-area",
        "cols" => "6",
        "rows" => 20
    )) ?>

    <?php echo $this->tag->passwordField(array(
        "password",
        "size" => 30
    )) ?>

    <?php echo $this->tag->hiddenField(array(
        "parent_id",
        "value"=> "5"
    )) ?>

Volt语法：	
	
Volt syntax:

.. code-block::  html+jinja

    {{ text_field("username") }}

    {{ text_area("comment", "This is the content", "cols": "6", "rows": 20) }}

    {{ password_field("password", "size": 30) }}

    {{ hidden_field("parent_id", "value": "5") }}

做筛选框Making Select Boxes
-------------------------------------
生成选择框是很容易的,尤其是如果相关数据存储在PHP关联数组。选择元素的视图助手为Phalcon\\Tag::select() 和Phalcon\\Tag::selectStatic()。Phalcon\\Tag::select()是专门设计用于处理:doc:`Phalcon\\Mvc\\Model <models>`数据的,Phalcon\\Tag::selectStatic()可以使用PHP数组。

Generating select boxes (select box) is easy, especially if the related data is stored in PHP associative arrays. The helpers for select elements are Phalcon\\Tag::select() and Phalcon\\Tag::selectStatic().
Phalcon\\Tag::select() has been was specifically designed to work with :doc:`Phalcon\\Mvc\\Model <models>`, while Phalcon\\Tag::selectStatic() can with PHP arrays.

.. code-block:: php

    <?php

    // Using data from a resultset
    echo $this->tag->select(
        array(
            "productId",
            Products::find("type = 'vegetables'"),
            "using" => array("id", "name")
        )
    );

    // Using data from an array
    echo $this->tag->selectStatic(
        array(
            "status",
            array(
                "A" => "Active",
                "I" => "Inactive",
            )
        )
    );

将会产生如下HTML代码：	
	
The following HTML will generated:

.. code-block:: html

    <select id="productId" name="productId">
        <option value="101">Tomato</option>
        <option value="102">Lettuce</option>
        <option value="103">Beans</option>
    </select>

    <select id="status" name="status">
        <option value="A">Active</option>
        <option value="I">Inactive</option>
    </select>

可以添加一个空白的option到产生的html中：	
	
You can add an "empty" option to the generated HTML:

.. code-block:: php

    <?php

    // Creating a Select Tag with an empty option
    echo $this->tag->select(
        array(
            "productId",
            Products::find("type = 'vegetables'"),
            "using" => array("id", "name"),
            "useEmpty" => true
        )
    );

.. code-block:: html

    <select id="productId" name="productId">
        <option value="">Choose..</option>
        <option value="101">Tomato</option>
        <option value="102">Lettuce</option>
        <option value="103">Beans</option>
    </select>

.. code-block:: php

    <?php

    // Creating a Select Tag with an empty option with default text
    echo $this->tag->select(
        array(
            'productId',
            Products::find("type = 'vegetables'"),
            'using'      => array('id', "name"),
            'useEmpty'   => true,
            'emptyText'  => 'Please, choose one...',
            'emptyValue' => '@'
        )
    );

.. code-block:: html

    <select id="productId" name="productId">
        <option value="@">Please, choose one..</option>
        <option value="101">Tomato</option>
        <option value="102">Lettuce</option>
        <option value="103">Beans</option>
    </select>

用Volt实现如上的代码：	
	
Volt syntax for above example:

.. code-block:: jinja

    {# Creating a Select Tag with an empty option with default text #}
    {{ select('productId', products, 'using': ['id', 'name'],
        'useEmpty': true, 'emptyText': 'Please, choose one...', 'emptyValue': '@') }}

HTML属性赋值Assigning HTML attributes
-------------------------------------------
所有的视图助手接受数组作为其第一个参数，可以包含额外的HTML属性用于元素的生成。

All the helpers accept an array as their first parameter which can contain additional HTML attributes for the element generated.

.. code-block:: html+php

    <?php $this->tag->textField(
        array(
            "price",
            "size"        => 20,
            "maxlength"   => 30,
            "placeholder" => "Enter a price",
        )
    ) ?>

使用Volt如下：	
	
or using Volt:

.. code-block:: jinja

    {{ text_field("price", "size": 20, "maxlength": 30, "placeholder": "Enter a price") }}

产生的html如下：	
	
The following HTML is generated:

.. code-block:: html

    <input type="text" name="price" id="price" size="20" maxlength="30"
        placeholder="Enter a price" />

设置视图助手值Setting Helper Values
--------------------------------------

控制器中视图助手From Controllers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
在MVC框架为表单元素在视图中设置特定的默认值是一个好的编程原则。可以直接从控制器使用Phalcon\\Tag::setDefault()设置这些值。这个助手预先设置了所有在视图中其他助手的默认值。如果任何助手中名称匹配预加载的默认值,则将使用这个默认值,除非是在视图中直接指定一个默认值。

It is a good programming principle for MVC frameworks to set specific values for form elements in the view.
You can set those values directly from the controller using Phalcon\\Tag::setDefault().
This helper preloads a value for any helpers present in the view. If any helper in the view has
a name that matches the preloaded value, it will use it, unless a value is directly assigned on the helper in the view.

.. code-block:: php

    <?php

    use Phalcon\Mvc\Controller;

    class ProductsController extends Controller
    {

        public function indexAction()
        {
            $this->tag->setDefault("color", "Blue");
        }

    }

在视图中，selectStatic助手匹配的值将会使用默认值，在这个例子中就是color	
	
At the view, a selectStatic helper matches the same index used to preset the value. In this case "color":

.. code-block:: php

    <?php

    echo $this->tag->selectStatic(
        array(
            "color",
            array(
                "Yellow" => "Yellow",
                "Blue"   => "Blue",
                "Red"    => "Red"
            )
        )
    );

将会产生如下"Blue"为选中状态的默认值：	
	
This will generate the following select tag with the value "Blue" selected:

.. code-block:: html

    <select id="color" name="color">
        <option value="Yellow">Yellow</option>
        <option value="Blue" selected="selected">Blue</option>
        <option value="Red">Red</option>
    </select>

	
	
请求中的视图助手From the Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 :doc:`Phalcon\\Tag <../api/Phalcon_Tag>`提供一个特殊功能，在请求的时候视图助手提供了简便的验证提示信息并且不会丢失已经输入的信息。

A special feature that the :doc:`Phalcon\\Tag <../api/Phalcon_Tag>` helpers have is that they keep the values
of form helpers between requests. This way you can easily show validation messages without losing entered data.

直接设置值Specifying values directly
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
视图助手都有"value"属性。可以直接设置视图助手的值。如果直接设置了值，则将忽略setDefault()设置的值以及请求过来的值。

Every form helper supports the parameter "value". With it you can specify a value for the helper directly.
When this parameter is present, any preset value using setDefault() or via request will be ignored.

动态设置文档标题Changing dynamically the Document Title
--------------------------------------------------------
:doc:`Phalcon\\Tag <../api/Phalcon_Tag>`提供了在控制器中动态改变文档标题的功能。

:doc:`Phalcon\\Tag <../api/Phalcon_Tag>` offers helpers to change dynamically the document title from the controller.
The following example demonstrates just that:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Controller;

    class PostsController extends Controller
    {

        public function initialize()
        {
            $this->tag->setTitle("Your Website");
        }

        public function indexAction()
        {
            $this->tag->prependTitle("Index of Posts - ");
        }

    }

.. code-block:: html+php

    <html>
        <head>
            <?php echo $this->tag->getTitle(); ?>
        </head>
        <body>

        </body>
    </html>

将会产生如下代码：	
	
The following HTML will generated:

.. code-block:: html+php

    <html>
        <head>
            <title>Index of Posts - Your Website</title>
        </head>
          <body>

          </body>
    </html>

静态内容助手Static Content Helpers
-----------------------------------
:doc:`Phalcon\\Tag <../api/Phalcon_Tag>`提供了产生script, link 或者 img的标签。帮助我们快速产生代码。

:doc:`Phalcon\\Tag <../api/Phalcon_Tag>` also provide helpers to generate tags such as script, link or img. They aid in quick and easy generation of the static resources of your application

图片Images
^^^^^^^^^^^^^^^^^
.. code-block:: php

    <?php

    // Generate <img src="/your-app/img/hello.gif">
    echo $this->tag->image("img/hello.gif");

    // Generate <img alt="alternative text" src="/your-app/img/hello.gif">
    echo $this->tag->image(
        array(
           "img/hello.gif",
           "alt" => "alternative text"
        )
    );

Volt 语法:	
	
Volt syntax:

.. code-block:: jinja

    {# Generate <img src="/your-app/img/hello.gif"> #}
    {{ image("img/hello.gif") }}

    {# Generate <img alt="alternative text" src="/your-app/img/hello.gif"> #}
    {{ image("img/hello.gif", "alt": "alternative text") }}

css样式Stylesheets
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: php

    <?php

    // Generate <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Rosario" type="text/css">
    echo $this->tag->stylesheetLink("http://fonts.googleapis.com/css?family=Rosario", false);

    // Generate <link rel="stylesheet" href="/your-app/css/styles.css" type="text/css">
    echo $this->tag->stylesheetLink("css/styles.css");

Volt 语法:	
	
Volt syntax:

.. code-block:: jinja

    {# Generate <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Rosario" type="text/css"> #}
    {{ stylesheet_link("http://fonts.googleapis.com/css?family=Rosario", false) }}

    {# Generate <link rel="stylesheet" href="/your-app/css/styles.css" type="text/css"> #}
    {{ stylesheet_link("css/styles.css") }}

Javascript
^^^^^^^^^^
.. code-block:: php

    <?php

    // Generate <script src="http://localhost/javascript/jquery.min.js" type="text/javascript"></script>
    echo $this->tag->javascriptInclude("http://localhost/javascript/jquery.min.js", false);

    // Generate <script src="/your-app/javascript/jquery.min.js" type="text/javascript"></script>
    echo $this->tag->javascriptInclude("javascript/jquery.min.js");

Volt 语法:	
	
Volt syntax:

.. code-block:: jinja

    {# Generate <script src="http://localhost/javascript/jquery.min.js" type="text/javascript"></script> #}
    {{ javascript_include("http://localhost/javascript/jquery.min.js", false) }}

    {# Generate <script src="/your-app/javascript/jquery.min.js" type="text/javascript"></script> #}
    {{ javascript_include("javascript/jquery.min.js") }}

HTML5 对象 HTML5 elements - generic HTML helper
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Phalcon 提供了生成任何HTML元素的标签助手。由开发人员为视图助手生成一个有效的HTML元素名。

Phalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper.


.. code-block:: php

    <?php

    // Generate
    // <canvas id="canvas1" width="300" class="cnvclass">
    // This is my canvas
    // </canvas>
    echo $this->tag->tagHtml("canvas", array("id" => "canvas1", "width" => "300", "class" => "cnvclass"), false, true, true);
    echo "This is my canvas";
    echo $this->tag->tagHtmlClose("canvas");

Volt 语法:	
	
Volt syntax:

.. code-block:: html+jinja

    {# Generate
    <canvas id="canvas1" width="300" class="cnvclass">
    This is my canvas
    </canvas> #}
    {{ tag_html("canvas", ["id": "canvas1", width": "300", "class": "cnvclass"], false, true, true) }}
        This is my canvas
    {{ tag_html_close("canvas") }}


标签服务Tag Service
-------------------------
:doc:`Phalcon\\Tag <../api/Phalcon_Tag>`通过使用’tag‘服务来生效。这就意味着在应用中任何包含服务应用的地方可以使用它。

:doc:`Phalcon\\Tag <../api/Phalcon_Tag>` is available via the 'tag' service, this means you can access it from any part
of the application where the services container is located:

.. code-block:: php

    <?php echo $this->tag->linkTo('pages/about', 'About') ?>

可以方便的定义一个新的视图助手去替换服务容器中的’tag‘服务：	
	
You can easily add new helpers to a custom component replacing the service 'tag' in the services container:

.. code-block:: php

    <?php

    use Phalcon\Tag;

    class MyTags extends Tag
    {
        //...

        //Create a new helper
        static public function myAmazingHelper($parameters)
        {
            //...
        }

        //Override an existing method
        static public function textField($parameters)
        {
            //...
        }
    }

然后替换’tag‘服务定义：	
	
Then change the definition of the service 'tag':

.. code-block:: php

    <?php

    $di['tag'] = function() {
        return new MyTags();
    };

创建助手Creating your own helpers
----------------------------------------
可以方便的创建助手，第一步，在controller和models的同级目录创建一个以视图助手名称命名的文件，在文件中创建一个``MyTags.php``文件。如``/app/customhelpers/MyTags.php``目录结构。在``MyTags.php``文件中我们扩展 :doc:`Phalcon\\Tag <../api/Phalcon_Tag>` 并实现自己的代码。下面就是自定义助手的例子：

You can easily create your own helpers. First, start by creating a new folder within the same directory as your controllers and models. Give it a title that is relative to what you are creating. For our example here, we can call it "customhelpers". Next we will create a new file titled ``MyTags.php`` within this new directory. At this point, we have a structure that looks similar to : ``/app/customhelpers/MyTags.php``. In ``MyTags.php``, we will extend the :doc:`Phalcon\\Tag <../api/Phalcon_Tag>` and implement your own helper. Below is a simple example of a custom helper:

.. code-block:: php

    <?php

    use Phalcon\Tag;

    class MyTags extends Tag
    {

        /**
         * Generates a widget to show a HTML5 audio tag
         *
         * @param array
         * @return string
         */
        static public function audioField($parameters)
        {

            // Converting parameters to array if it is not
            if (!is_array($parameters)) {
                $parameters = array($parameters);
            }

            // Determining attributes "id" and "name"
            if (!isset($parameters[0])) {
                $parameters[0] = $parameters["id"];
            }

            $id = $parameters[0];
            if (!isset($parameters["name"])) {
                $parameters["name"] = $id;
            } else {
                if (!$parameters["name"]) {
                    $parameters["name"] = $id;
                }
            }

            // Determining widget value,
            // \Phalcon\Tag::setDefault() allows to set the widget value
            if (isset($parameters["value"])) {
                $value = $parameters["value"];
                unset($parameters["value"]);
            } else {
                $value = self::getValue($id);
            }

            // Generate the tag code
            $code = '<audio id="'.$id.'" value="'.$value.'" ';
            foreach ($parameters as $key => $attributeValue) {
                if (!is_integer($key)) {
                    $code.= $key.'="'.$attributeValue.'" ';
                }
            }
            $code.=" />";

            return $code;
        }

    }

创建完自定义助手后，我们需要在index.php中自动加载上我们的助手目录。	
	
After creating our custom helper, we will autoload the new directory that contains our helper class from our "index.php" located in the public directory.

.. code-block:: php

    <?php

    use Phalcon\Loader;
    use Phalcon\Mvc\Application;
    use Phalcon\DI\FactoryDefault();
    use Phalcon\Exception as PhalconException;

    try {

        $loader = new Loader();
        $loader->registerDirs(array(
            '../app/controllers',
            '../app/models',
            '../app/customhelpers' // Add the new helpers folder
        ))->register();

        $di = new FactoryDefault();

        // Assign our new tag a definition so we can call it
        $di->set('MyTags',  function()
        {
            return new MyTags();
        });

        $application = new Application($di);
        echo $application->handle()->getContent();

        } catch(PhalconException $e) {
             echo "PhalconException: ", $e->getMessage();
        }

    }

现在我们就可以视图中使用我们的新视图助手了：
	
Now you are ready to use your new helper within your views:

.. code-block:: php

    <body>

        <?php

        echo MyTags::audioField(array(
            'name'  => 'test',
            'id'    => 'audio_test',
            'src'   => '/path/to/audio.mp3'
            ));
        ?>

    </body>

下面我们将介绍一个非常快的PHP模板引擎 :doc:`Volt <volt>` ,在里面我们使用和Phalcon\\Tag相同的语法。

In next chapter, we'll talk about :doc:`Volt <volt>` a faster template engine for PHP, where you can use a
more friendly syntax for using helpers provided by Phalcon\\Tag.
